---
import * as interfaces from '../../lib/interfaces.ts'
import {
  getAllPosts,
  getPostBySlug,
  getPostsByTag,
  getBlock,
  getAllTags,
  getAllBlocksByBlockId,
  downloadFile,
} from '../../lib/notion/client.ts'
import {
  getPostLink,
  filePath,
  extractTargetBlocks,
} from '../../lib/blog-helpers.ts'
import Layout from '../../layouts/Layout.astro'
import PostDate from '../../components/PostDate.astro'
import PostTags from '../../components/PostTags.astro'
import PostTitle from '../../components/PostTitle.astro'
import PostBody from '../../components/PostBody.astro'
import BlogPostsLink from '../../components/BlogPostsLink.astro'
import BlogTagsLink from '../../components/BlogTagsLink.astro'
import AsideInfo from '../../components/AsideInfo.astro'
import styles from '../../styles/blog.module.css'

export async function getStaticPaths() {
  const posts = await getAllPosts()
  return posts.map((post: interfaces.Post) => ({ params: { slug: post.Slug } }))
}

const { slug } = Astro.params

const post = await getPostBySlug(slug)
if (!post) {
  throw new Error('Post not found. slug: ${slug}')
}

const [blocks, tags, postsHavingSameTag] = await Promise.all([
  getAllBlocksByBlockId(post.PageId),
  getAllTags(),
  getPostsByTag(post.Tags[0]?.name, 6),
])

const fileAtacchedBlocks = extractTargetBlocks('image', blocks)
  .concat(extractTargetBlocks('file', blocks))
  .filter((block) => {
    if (!block) {
      return false
    }
    const imageOrFile = block.Image || block.File
    return imageOrFile && imageOrFile.File && imageOrFile.File.Url
  })

// Download files
await Promise.all(
  fileAtacchedBlocks
    .map(async (block) => {
      const expiryTime = (block.Image || block.File).File.ExpiryTime
      if (Date.parse(expiryTime) > Date.now()) {
        return Promise.resolve(block)
      }
      return getBlock(block.Id)
    })
    .map((promise) =>
      promise.then((block) => {
        let url!: URL
        try {
          url = new URL((block.Image || block.File).File.Url)
        } catch (err) {
          console.log('Invalid file URL')
          return Promise.reject()
        }
        return Promise.resolve(url)
      })
    )
    .map((promise) => promise.then(downloadFile))
)

let ogImage = ''
if (post.FeaturedImage && post.FeaturedImage.Url) {
  ogImage = new URL(filePath(new URL(post.FeaturedImage.Url)), Astro.site)
}
---

<Layout
  title={post.Title}
  description={post.Excerpt}
  path={getPostLink(post.Slug)}
  ogImage={ogImage}
>
  <div className={styles.container}>
    <main>
      <div className={styles.post}>
        <div className={styles.postHeader}>
          <PostTags post={post} />
          <PostTitle post={post} enableLink={false} />
          <PostDate post={post} />
        </div>

        <PostBody blocks={blocks} />
      </div>
    </main>

    <aside>
      <AsideInfo />
      <BlogPostsLink
        heading={'⚑ ' + post.Tags[0]?.name}
        posts={postsHavingSameTag
          .filter((p: interfaces.Post) => p.Slug !== post.Slug)
          .slice(0, 6)}
      />
      <BlogTagsLink heading="⚑ Tags" tags={tags} />
    </aside>
  </div>
</Layout>
